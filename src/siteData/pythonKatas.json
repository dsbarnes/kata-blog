[
  {
    "title": "Fix the Bugs (Syntax) - My First Kata",
    "publishdate": "2020/04/21",
    "category": "python",
    "video": "XK_gwhgmhyY",
    "content": [
      {
        "type": "code",
        "head": "BigFix.py",
        "body": "def my_first_kata(a,b):\r\n    # isinstance(a, int) and isinstance(b, int)\r\n    # does not work.\r\n    # The real question here is why.\r\n    # and the real answer is, bools are 0 and 1 at the end of the day.\r\n\r\n    if type(a) == int and type(b) == int:\r\n        return a%b + b%a\r\n    return False\r\n"
      }
    ]
  },
  {
    "title": "Cyclops numbers",
    "publishdate": "2020/04/01",
    "category": "python",
    "video": "",
    "content": [
      {
        "type": "code",
        "head": "Cyclops.py",
        "body": "def cyclops(number):\r\n    # The first think we will want to do\r\n    # is convert the number to binary.\r\n    # bin() returns a string, that starts with 0b\r\n    # we can get rid of that by slicing it off.\r\n    b = bin(number)[2:]\r\n\r\n    # Once we have our binary, we could count 0s,\r\n    # however, we never need to do any logic with them,\r\n    # so let's just remove them with split()\r\n    b = b.split('0')\r\n\r\n    # Now that we have some 1s in an array,\r\n    # we want to know that there are only 2 elements,\r\n    # and that they are the same:\r\n    if len(b) == 2 and b[0] == b[1]:\r\n        return True\r\n\r\n    # And if we don't pass this test, it's not a cyclops number.\r\n    return False\r\n\r\n"
      }
    ]
  },
  {
    "title": "Area of a Square",
    "publishdate": "2020/04/01",
    "category": "python",
    "video": "",
    "content": [
      {
        "type": "code",
        "head": "Area.py",
        "body": "def square_area(A):\r\n    # We are given a length that is 1/4 of a circle circumference.\r\n    # If we trace this length 4 times\r\n    # then we will know the circumference.\r\n    circumference = 4 * A\r\n\r\n    # With this information, we remind ourselves of this formula: \r\n    # 2 * pi * r = Circumference.\r\n\r\n    # Therefore circumference / (2 * pi) = r.\r\n    radius = circumference / (2 * math.pi)\r\n\r\n    # The radius is the same as one side of the square.\r\n    # We can square that value, to get the area of the square:\r\n    return round(radius ** 2, 2)\r\n"
      }
    ]
  },
  {
    "title": "Beginner Series 3 Sum of Numbers",
    "publishdate": "2020/04/19",
    "category": "python",
    "video": "",
    "content": [
      {
        "type": "code",
        "head": "SumOfNumbers.py",
        "body": "# This is the final refactored code:\r\ndef get_sum(a,b):\r\n    return a if a==b else sum(range(min(a,b), max(a,b)+1))\r\n\r\n\r\ndef get_sum(a, b):\r\n    # According to the puzzle,\r\n    # if ever the two elements are the same,\r\n    # just return that value\r\n    if a == b:\r\n        # We could return either a, or b, as they are the same\r\n        return a\r\n\r\n    # If the values are not the same,\r\n    else:\r\n        sm = min(a,b)\r\n        lg = max(a,b)\r\n\r\n        # Then we want the sum of the range of numbers.\r\n        # We need to +1 because the upper argument of range()\r\n        # is not inclusive.\r\n        return sum(range(sm, lg+1)\r\n\r\n"
      }
    ]
  }
]